<div class="section" id="main-class-implementation">
    <h2 class="title">Revisiting basic concepts</h2>
    <p>
        Before implementing the application, let's revisit some key Java concepts that will be essential in this challange.<br>
    </p>

    <h3>Java Syntax</h3>
    <p>
        Java programs are structured into classes and methods. The <code>Main</code> class with static <code>main</code> method serves as the entry point for execution.<br>
        Each statement must end with a semicolon <code>;</code>, and code blocks are enclosed in curly braces. <code>{}</code><br>
    </p>

    <h3>Class vs Object</h3>
    <p>
        I really want to emphasize this: we write <strong>classes</strong>, which serve as <i>blueprints</i> for creating <strong>objects</strong>.<br>
        When we create a new object, we are creating an <strong>INSTANCE</strong> of a class.<br>
        <ul>
            <li><code>new Scanner(System.in);</code> - Creates an INSTANCE of the Scanner class, which is a new object of type Scanner.</li>
            <li><code>new Student("Joe", 21);</code> - Creates an INSTANCE of the Student class with the name "Joe" and age 21.</li>
        </ul>
        You should think of classes as new <i>types</i> of variables. For example, you have <strong>int</strong>, <strong>boolean</strong>, and <strong>String</strong>.<br>
        You can create your own types using classes, such as <strong>Student</strong>, <strong>House</strong>, or <strong>Car</strong>.<br>
        One key difference between a primitive type like <code>int</code> and a class like <code>Student</code> is that to create a <code>Student</code> object, you need to use the <code>new</code> keyword.
    </p>
    <pre>int number = 0;
// vs
Student someStudent = new Student();
    </pre>


    <h3>"Primitive" Data Types</h3>
    <p>
        Java supports various data types, including:
    <ul>
        <li><code>int</code> - Stores integers (whole numbers).</li>
        <li><code>double</code> - Stores floating-point numbers.</li>
        <li><code>boolean</code> - Stores true/false values.</li>
        <li><code>char</code> - Stores single characters.</li>
        <li><code>String</code> - Stores text (a sequence of characters).</li>
    </ul>
    In Java, primitive data types are the most basic types of data.<br>
    There are more types like <code>short</code> and <code>float</code>, but these are just variations of the types already mentioned above.<br>
    <strong>REMEMBER</strong> Java does not allow changing a variable's type after declaration.
    </p>

    <pre>public class Main {
    public static void main(String[] args) {
        int number = 10;
        number = "Hello";
    }
}
</pre>

    {{#getJsonContext '[
        { "text": "It will compile and run successfully.", "response": "Incorrect. Java does not allow changing a variable\'s type once declared.", "correct": false },
        { "text": "It will cause a compilation error.", "response": "Correct! Java is a statically-typed language, meaning that once a variable is declared with a specific type, it cannot be reassigned a different type.", "correct": true },
        { "text": "It will throw a runtime exception.", "response": "Incorrect. The error occurs at compile time, preventing the program from running (nothing will run at all!).", "correct": false }
    ]'}}
    {{> question text="What will happen when you run the above Java code?" answers=this }}
    {{/getJsonContext}}

    <p>
        To read more about primitive types, have a look at the official Java documentation: <a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html" target="_blank">Primitive Data Types</a>
    </p>

    <h3>String type</h3>
    <p>
        <code>String</code> type is a bit of a special, it's not actually a primitive, it's a actually an array of <code>char</code> types.<br>
        That makes it a bit more complicated to use, you can't easily compare two string objects with an equal sign like you would with <code>int</code> type.<br>
        <strong>REMEMBER</strong> to use the following functions when comparing strings:
        <ul>
            <li><code>string.equals("some text")</code></li>
            <li><code>string.equalsIgnoreCase("sOmE tEXt")</code></li>
        </ul>

        More about <code>String</code> type here: <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/String.html" target="_blank">Class String</a>
    </p>

    <h3>Arrays</h3>
    </p>
    Arrays in Java allow storing multiple values of the same type in a single variable.<br>
    Arrays have fixed, predefined size and can be accessed using indices from from 0 to (array length - 1):
    <ul>
        <li>Declaring an array: <code>int[] numbers = new int[5];</code> - Creates an array of size 5, where each element is initially set to 0.</li>
        <li>Initializing an array: <code>int[] numbers = {1, 2, 3, 4, 5};</code> - Creates an array with specified values. The size will be 5.</li>
        <li>Accessing elements: <code>int firstNumber = numbers[0];</code></li>
        <li>Looping through an array: <code>for (int i = 0; i < numbers.length; i++) { System.out.println(numbers[i]); }</code> - Iterates through each element and prints its value.</li>
    </ul>
    Arrays are useful for managing collections of data efficiently, but their size is fixed upon declaration and cannot be changed.<br>
    If you need bigger array, you need to create a new one and "copy" all the values from the old array to the new one.<br>
    There exist more useful data type in Java called <code>List</code>, it has a dynamic size, but we've not covered it yet in our course.<br>
    For more detailed information about arrays, refer to the official Java documentation: <a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/arrays.html" target="_blank">Arrays</a>
    </p>

    <h3>Control Flow</h3>
    <p>
        Java uses control structures to determine the flow of execution:
    <ul>
        <li><code>if (true) { /* do something */ } else { /* do something else */ } </code> statements allow for conditional execution of code.</li>
        <li><code>for (int i = 0; i <= 10; i++) { /* do something from 0 to 10 */ }</code> and <code>while (condition) { /* do something while condition is true */ }</code> loops enable repetitive execution of statements.</li>
    </ul>
    For more detailed information, refer to the official Java documentation: <a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/flow.html" target="_blank">Java Control Flow Documentation</a>
    </p>

    <h3>Basic input and output</h3>
    <p>
        Java provides various ways to interact with the console for input and output operations.<br>
        The following are what we've learned in the class + some small bits that I think are useful.<br>
    <ul>
        <li><code>System.out.println("Hello");</code> - Print "Hello" with a new line.</li>
        <li><code>System.out.print("Hello");</code> - Print "Hello" without jumping to a new line!</li>
    </ul>

        <strong>Reading User Input</strong><br>
        To accept user input, Java provides the <code>Scanner</code> class.<br>
        Before using it, you must import it at the top of your file:
        </p>
        
        <pre>import java.util.Scanner; // Import at the beginning of the file

public class Main {
  /* Other code */
}</pre>
        
        <p>
            Importing <code>Scanner</code> alone is not enough; you also need to create an <strong>INSTANCE</strong> of the class.<br>
            <code>Scanner scanner = new Scanner(System.in);</code> - This creates a new <code>Scanner</code> object and stores it in the <code>scanner</code> variable.<br><br>
        
            <strong>Reading Different Data Types</strong>
        <ul>
            <li><code>String text = scanner.nextLine();</code> - Reads a full line of text.</li>
            <li><code>int number = Integer.parseInt(scanner.nextLine());</code> - Reads an integer.</li>
            <li><code>double decimal = Double.parseDouble(scanner.nextLine());</code> - Reads a decimal number.</li>
        </ul>
        
        <strong>Note:</strong><br>
        The <code>Scanner</code> class provides methods like <code>nextInt()</code>, but I recommend avoiding them as they may not work as expected in certain cases.<br>
        This is just my opinion, but I find it more reliable to read input as a <code>String</code> and then parse it using Javaâ€™s built-in functions.<br><br>

        <code>Scanner</code> documentation can be found here: <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Scanner.html" target="_blank">Class Scanner Documentation</a>
    </p>

    <p>
        Feel free to revisit this page any time you forget something.
    </p>
</div>