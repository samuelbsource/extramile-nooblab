<div class="section" id="main-class-implementation">
    <h2 class="title">Implementing the Application in the Main Class</h2>
    <p>
        In this section, you will implement the entire application within the <code>Main</code> class, without creating additional objects.<br>
        The goal is to experience the challenges of procedural programming before transitioning to Object-Oriented Programming (OOP).
    </p>
    
    <p>
        Your task is to build a simple menu-driven application that follows the structure outlined below.<br>
        Try to infer the intended behavior or implement something slightly different - there’s no penalty for making different design choices!
    </p>
<div class="fluid-container">
<pre class="tui-design">==== Edu Track - main menu ====
1. Add student
2. List students
3. Edit student
4. Remove student
5. Exit</pre>

<pre class="tui-design">==== Edu Track - add student ====
Name: Joe
University: Kingston University
Course: Computer Science
Year: 1
Is home student [Y/n]? Y
</pre>

<pre class="tui-design">==== Edu Track - list students ====
0. Avery
1. Sofia
2. Elijah
3. Noor
4. null
</pre>

<pre class="tui-design">==== Edu Track - edit student ====
Student ID: 3
Name: Nuri
University: (unchanged)
Course: (unchanged)
Year: 2
Is home student [y/n]? (unchanged)
</pre>

<pre class="tui-design">==== Edu Track - remove student ====
Student ID: 2
Student Elijah was removed from the system.
</pre>

<pre class="tui-design">==== Edu Track ====
Thank you for using Edu Track!
</pre>
</div>
    <p>
        To get started, here’s a basic program that prints "Hello World" and imports the <code>Scanner</code> class, which will be useful later.<br>
        This serves as a solid foundation before expanding the program.
    </p>
    {{{ insertBundle "starter" }}}

    <p>
        Before jumping into coding, take some time to plan your approach.<br>
        Open a notepad and jot down the individual steps you need to implement.<br>
        A key part of this challenge is structuring the program <strong>without using additional classes.</strong><br>
    </p>

    <p>
        <strong>Tip:</strong> You may need to rely heavily on arrays.<br>
        Since arrays have a fixed size, you can take inspiration from early computer games:<br>
        Allocate a fixed number of <strong>slots</strong> (e.g., five) and limit the number of entries accordingly.<br>
    </p>

    <h3>Understanding User Stories</h3>
    <p>
        Below are some user stories that describe how a real user would interact with your program.<br>
        Think of these as <strong>test cases</strong> - each one represents a feature that should be implemented.
    </p>

    <h3>Story #1</h3>
    <p>
        <strong>As:</strong> a user,<br>
        <strong>I want to:</strong> View the menu displayed on the screen.<br>
        <strong>So that:</strong> I can easily see the available options.
    </p>
    
    <h3>Story #2</h3>
    <p>
        <strong>As:</strong> a user,<br>
        <strong>I want to:</strong> Input an option using my keyboard to select a menu item.<br>
        <strong>So that:</strong> I can navigate to different sections of the application.
    </p>
    
    <h3>Story #3</h3>
    <p>
        <strong>As:</strong> a user,<br>
        <strong>I want to:</strong> Return to the Main Menu after completing a task.<br>
        <strong>So that:</strong> I can choose another action without restarting the application.
    </p>
    
    <h3>Story #4</h3>
    <p>
        <strong>As:</strong> a user,<br>
        <strong>I want to:</strong> See the menu to add new student data when I input "1".<br>
        <strong>So that:</strong> I can register a new student in the system.
    </p>
    
    <h3>Story #5</h3>
    <p>
        <strong>As:</strong> a user,<br>
        <strong>I want to:</strong> See a list of all students in the system when I input "2".<br>
        <strong>So that:</strong> I can review the student records.
    </p>
    
    <h3>Story #6</h3>
    <p>
        <strong>As:</strong> a user,<br>
        <strong>I want to:</strong> See a list of students with an option to select one for editing when I input "3".<br>
        <strong>So that:</strong> I can modify a student’s details if needed.
    </p>
    
    <h3>Story #7</h3>
    <p>
        <strong>As:</strong> a user,<br>
        <strong>I want to:</strong> Be prompted to enter new details when editing a student’s information.<br>
        <strong>So that:</strong> I can either update the information or leave fields blank to retain existing values.
    </p>
    
    <h3>Story #8</h3>
    <p>
        <strong>As:</strong> a user,<br>
        <strong>I want to:</strong> See a list of students with an option to select one for deletion when I input "4".<br>
        <strong>So that:</strong> I can remove a student’s data from the system if needed.
    </p>
    
    <h3>Story #9</h3>
    <p>
        <strong>As:</strong> a user,<br>
        <strong>I want to:</strong> Exit the program when I input "5".<br>
        <strong>So that:</strong> I can close the application when I’m done using it.
    </p>

    <h3>Final Implementation</h3>
    <p>
        How is it going?<br>
        If you’re really struggling, you can take a look at the reference implementation I’ve written.<br>
        However, I strongly encourage you to try building the program on your own first.<br>
        The best way to learn is through hands-on experience!
    </p>

    {{#getJsonContext '[
    { "id": "muc28q1", "text": "Yes, and I want to see your code.", "response": "Incorrect. Try doing it again by yourself, one more time.", "correct": false, "enables": "muc28q3" },
    { "id": "muc28q2", "text": "No, I made it by myself.", "response": "Amazing! You can continue to the next section.", "correct": true, "enables": "" },
    { "id": "muc28q3", "text": "I reeaaly need help!", "response": "Fine, I\'ve added my code below, you can try it, BUT REMEMBER TO FIRST SAVE YOUR OWN CODE", "correct": true, "hidden": true, "enables": "procedural-code" }
    ]'}}
    {{> question_ex id="muc28" text="Are you struggling?" answers=this }}
    {{/getJsonContext}}

    <div id="procedural-code" style="display: none;">
        {{{ insertBundle "procedural-code-example" }}}
    </div>
</div>